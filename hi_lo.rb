=begin
#***************************************************************************************
#* LICENCE AND USAGE                                                                   *
#* I will spare you the legal lingo and keep it simple and in plain english.           *
#* For this software, you are free to use it, modify it and even distribute it         *
#* as long as you follow these simple rules:                                           *
#*    - Include this LICENSE AND USAGE header for every copy                           *
#*    - Give credit for the original work                                              *
#* Now, I cannot guarantee that this software will always work properly, or as         *
#* intended, which is why I believe that by making it easy to modify and distribute    *
#* many people can contribute and improve upon it and in the end we all win.           *
#* File: hi_lo.rb                                                                      *
#* Author: Amos Nyarongi                                                               *
#* Date Created: October 10, 2017                                                      *
#* Las Modified: October 24, 2017                                                      *
#* Â© Copyright omenta 2017.                                                            *
#*                                                                                     *
#***************************************************************************************
=end

def instructions
  puts '+--------------------------------------------------------+'
  puts '|                  Welcome to HI-LO                      |'
  puts '+--------------------------------------------------------+'
  puts '| The object of the game is to correctly guess the       |'
  puts '| secret number generated by the computer.               |'
  puts '| The number is between 1 and 100 and you have 6 tries   |'
  puts '| to guess it correctly. Each time you guess,            |'
  puts '| the computer will give you feedback on your guess.     |'
  puts '| if your guess is higher than the number it will say    |'
  puts '| too high, if it is lower, it will say too low          |'
  puts '| and if you guess correctly, it will let you know.       |'
  puts '| The more tries it takes you to get the number, the     |'
  puts '| less points you get.                               |'
  puts '| You have a maximum of 6 tries.                         |'
  puts '+--------------------------------------------------------+'
  puts '|                       ENJOY!                           +'
  puts '+--------------------------------------------------------|'
end

def gameplay
  secret_number = rand(1..100)
  tries = 1
  puts "\nGenerating secret number...."
  puts 'Secret number generated!'
  puts "#{secret_number}" # <-- TEMP to be turned on for debugging only. Should be removed before final release.
  print 'What is your guess?: '
  guess = gets.to_i # gets the user input and converts it to integer
  unless guess > 0 and guess <= 100
    puts 'Invalid entry! '
    puts 'Number must be between 1 and 100.'
    print 'Guess: '
  end
  until guess == secret_number

    if guess < secret_number
      puts 'Too Low'
      print 'Guess: '
      guess = gets.to_i
    elsif guess > secret_number
      puts 'Too High'
      print 'Guess: '
      guess = gets.to_i
    else
      # ....
    end # end if
    tries += 1
  end # end until
  if guess == secret_number
    puts 'Congratulations! You guessed correctly'
    puts "The secret number is indeed #{guess}"
    if tries == 1
      puts "Wow! you got it in just #{tries} try."
    else
      puts "You got it in #{tries} tries"
    end
    puts "Your score is #{scoring(tries)}\n"
  end
  puts "What's your name?"
  name = gets.chomp

  # ---- this part is a little confusing so pay attention to understand what's going on here.--- #
  # ---- please suggest ways to improve it and make it a little more clear---- #
  if $leaders.has_key?(name) && $leaders.key(scoring(tries)) == name
    # do nothing because the name-score pair already exists
  elsif $leaders.has_key?(name) && $leaders.key(scoring(tries)) != name
    # if there's Amos but Amos has a different score. replace lower score with higher one, otherwise do nothing
    if $leaders[name] < scoring(tries)
      $leaders[name] = scoring(tries)
    else
      #do nothing because we don't want to replace higher score with lower one
    end
  else
    # add the new name-score pair to hash
    $leaders["#{name}"] = scoring(tries)
  end

end

def scoring (tries)
  case tries
  when 6
    score = 1
  when 5
    score = 2
  when 4
    score = 3
  when 3
    score = 4
  when 2
    score = 5
  when 1
    score = 6
  else
    score = 0
  end

end

def leaderboard
  $sorted_leaders = $leaders.sort_by{|key, value| value}.reverse # sorts leaders by score from high to low
  puts '+------------------------------+'
  puts '|        Leaderboard           |'
  puts '+------------------------------+'
  puts '|    Name     |     Score      |'
  puts '+------------------------------+'
  $sorted_leaders.each do |name, score|
    puts "|  #{name.ljust(10)}         #{score}        |"

  end
  puts '+------------------------------+'
end

class HiLo
  play_again = true
  instructions
  $leaders = Hash.new
  while play_again do
    gameplay # play game
    leaderboard
    print 'Would you like to play again?[Y/N]: '
    again = gets.chomp
    if again.upcase == 'Y'
      play_again = true
    elsif again.upcase == 'N'
      puts 'Thanks for playing.'
      puts 'Goodbye!'
      play_again = false
    else
      until (again.upcase == 'Y') or (again.upcase == 'N')
        puts 'Invalid Entry! Type Y or N'
        again = gets.chomp
      end
    end
  end # end while
end # end class HiLo

